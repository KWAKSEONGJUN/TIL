SQL에 대하여 간단히 복습했다.

DML(데이터 조작어)
select, insert, delete, update 각각 검색, 삽입, 삭제, 수정이다.
where 이나 group by, order by를 추가하여 원하는 방식으로 검색 등을 할 수 있다.

DDL (데이터 정의어)
create, drop 등으로 테이블을 생성, 삭제 할 수 있다.


그리고 Maven에 대해 공부했다.
하나의 프로젝트의 규모가 커질 수록 사용하는 라이브러리양 또한 상당히 많아질 것 이다.
이들을 하나하나 관리하는 것은 상당이 복잡해진다.
Maven은 이를 해결해줄 수 있는 도구이다. Maven은 내가 사용할 라이브러리 뿐만 아니라 이를 사용하기 위한 다른 라이브러리들도 네트워크를 통해 알아서 내 프로젝트에 자동으로 다운 받아준다.

Maven의 사용방식은 pom.xml을 작성하는 것이다. 

pom.xml파일은 여러 태그가 존재하고 각각의 태그의 의미는 다음과 같다.

project : pom.xml 파일의 최상위 루트 엘리먼트(Root Element)
modelVersion : POM model의 버전
groupId : 프로젝트를 생성하는 조직의 고유 아이디를 결정합니다. 일반적으로 도메인 이름을 거꾸로 적습니다.
artifactId : 해당 프로젝트에 의하여 생성되는 artifact의 고유 아이디를 결정합니다. Maven을 이용하여  pom.xml을 빌드할 경우 다음과 같은 규칙으로 artifact가 생성됩니다. artifactid-version.packaging. 위 예의 경우 빌드할 경우 examples-1.0-SNAPSHOT.jar 파일이 생성됩니다.
packaging : 해당 프로젝트를 어떤 형태로 packaging 할 것인지 결정합니다. jar, war, ear 등이 해당됩니다.
version : 프로젝트의 현재 버전. 프로젝트가 개발 중일 때는 SNAPSHOT을 접미사로 사용합니다. Maven의 버전 관리 기능은 라이브러리 관리를 편하게 합니다.
name : 프로젝트의 이름입니다.
url : 프로젝트 사이트가 있다면 사이트 URL을 등록하는 것이 가능합니다.
dependencies : 프로젝트 의존 관계에 있는 라이브러리들을 나열하여 관리합니다.
build : 빌드에 사용할 plug-in의 목록을 나타냅니다.
